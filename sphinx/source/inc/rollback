.. Automatically generated file - do not modify.

.. function:: renpy.can_rollback()
    
    Returns true if we can rollback.

.. function:: renpy.checkpoint(data=None)
    
    Makes the current statement a checkpoint that the user can rollback to. Once
    this function has been called, there should be no more interaction with the
    user in the current statement.
    
    `data`
        This data is returned by :func:`renpy.roll_forward_info` when the
        game is being rolled back.

.. function:: renpy.in_rollback()
    
    Returns true if the game has been rolled back.

.. function:: renpy.roll_forward_info()
    
    When in rollback, returns the data that was supplied to :func:`renpy.checkpoint`
    the last time this statement executed. Outside of rollback, returns None.

.. function:: renpy.rollback(force=False, checkpoints=1, defer=False, greedy=True, label=None)
    
    Rolls the state of the game back to the last checkpoint.
    
    `force`
        If true, the rollback will occur in all circumstances. Otherwise,
        the rollback will only occur if rollback is enabled in the store,
        context, and config.
    
    `checkpoints`
        Ren'Py will roll back through this many calls to renpy.checkpoint. It
        will roll back as far as it can, subject to this condition.
    
    `defer`
        If true, the call will be deferred until code from the main context is
        executed.
    
    `greedy`
        If true, rollback will occur just before the previous checkpoint.
        If false, rollback occurs to just before the current checkpoint.
    
    `label`
        If not None, a label that is called when rollback completes.

.. function:: renpy.suspend_rollback(flag)
    
    Rollback will skip sections of the game where rollback has been
    suspended.
    
    `flag`:
        When `flag` is true, rollback is suspended. When false,
        rollback is resumed.

