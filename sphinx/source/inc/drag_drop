.. Automatically generated file - do not modify.

.. class:: Drag(d=None, drag_name=None, draggable=True, droppable=True, drag_raise=True, dragged=None, dropped=None, drag_handle=(0.0, 0.0, 1.0, 1.0), drag_joined=..., clicked=None, hovered=None, unhovered=None, **properties)
    
    A displayable that represents an object that can be dragged around
    its enclosing area. A Drag can also represent an area that
    other Drags can be dropped on.
    
    A Drag can be moved around inside is parent. Generally, its parent
    should be either a :func:`Fixed` or :class:`DragGroup`.
    
    A Drag has one child. The child's state reflects the status
    of the drag and drop operation:
    
    * ``selected_hover`` - when it is being dragged.
    * ``selected_idle`` - when it can be dropped on.
    * ``hover`` - when the draggable will be dragged when the mouse is
      clicked.
    * ``idle`` - otherwise.
    
    The drag handle is a rectangle inside the child. The mouse must be over
    a non-transparent pixel inside the drag handle for dragging or clicking
    to occur.
    
    A newly-created draggable is added to the default DragGroup. A draggable
    can only be in a single DragGroup - if it's added to a second group,
    it's removed from the first.
    
    When a Drag is first rendered, if it's position cannot be determined
    from the DragGroup it is in, the position of its upper-left corner
    is computed using the standard layout algorithm. Once that position
    
    
    `d`
        If present, the child of this Drag. Drags use the child style
        in preference to this, if it's not None.
    
    `drag_name`
        If not None, the name of this draggable. This is available
        as the `name` property of draggable objects. If a Drag
        with the same name is or was in the DragGroup, the starting
        position of this Drag is taken from that Draggable.
    
    `draggable`
        If true, the Drag can be dragged around the screen with
        the mouse.
    
    `droppable`
        If true, other Drags can be dropped on this Drag.
    
    `drag_raise`
        If true, this Drag is raised to the top when it is dragged. If
        it is joined to other Drags, all joined drags are raised.
    
    `dragged`
        A callback (or list of callbacks) that is called when the Drag
        has been dragged. It is called with two arguments. The first is
        a list of Drags that are being dragged. The second is either
        a Drag that is being dropped onto, or None of a drop did not
        occur. If the callback returns a value other than None, that
        value is returned as the result of the interaction.
    
    `dropped`
        A callback (or list of callbacks) that is called when this Drag
        is dropped onto. It is called with two arguments. The first
        is the Drag being dropped onto. The second is a list of Drags that
        are being dragged.  If the callback returns a value other than None,
        that value is returned as the result of the interaction.
    
        When a dragged and dropped callback are triggered for the same
        event, the dropped callback is only called if dragged returns
        None.
    
    `clicked`
        A callback this is called, with no arguments, when the Drag is
        clicked without being moved. A droppable can also be focused
        and clicked.  If the callback returns a value other than None,
        that value is returned as the result of the interaction.
    
    `drag_handle`
        A (x, y, width, height) tuple, giving the position of the drag
        handle within the child. In this tuple, integers are considered
        to be a literal number of pixels, while floats are relative to
        the size of the child.
    
    `drag_joined`
        This is called with the current Drag as an argument. It's
        expected to return a list of [ (drag, x, y) ] tuples, giving
        the draggables to drag as a unit. `x` and `y` are the offsets
        of the drags relative to each other, they are not relative
        to the corner of this drag.
    
    `drag_offscreen`
        If true, this draggable can be moved offscreen. This can be
        dangerous to use with drag_joined or drags that can change
        size, as the drags can leave the screen entirely, with no
        way to get them back on the screen.
    
    Except for `d`, all of the parameters are available as fields (with
    the same name) on the Drag object. In addition, after the drag has
    been rendered, the following fields become available:
    
    `x`, `y`
         The position of the Drag relative to its parent, in pixels.
    
    `w`, `h`
         The width and height of the Drag's child, in pixels.
        

    .. method:: set_child(d)
        
        Changes the child of this drag to `d`.
    
    .. method:: snap(x, y, delay=0)
        
        Changes the position of the drag. If the drag is not showing,
        then the position change is instantaneous. Otherwise, the
        position change takes `delay` seconds, and is animated as a
        linear move.
    
    .. method:: top(self)
        
        Raises this displayable to the top of its drag_group.
    
.. class:: DragGroup(*children, **properties)
    
    Represents a group of Drags. A Drag is limited to the boundary of
    its DragGroup. Dropping only works between Drags that are in the
    same DragGroup. Drags may only be raised when they are inside a
    DragGroup.
    
    A DragGroup is laid out like a :func:`Fixed`.
    
    All positional parameters to the DragGroup constructor should be
    Drags, that are added to the DragGroup.

    .. method:: add(child)
        
        Adds `child`, which must be a Drag, to this DragGroup.
    
    .. method:: get_child_by_name(name)
        
        Returns the first child of this DragGroup that has a drag_name
        of name.
    
    .. method:: remove(child)
        
        Removes `child` from this DragGroup.
    
