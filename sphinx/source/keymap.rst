.. _keymap:

Customizing the Keymap
======================

The variable :var:`config.keymap` contains a map from event names to lists
of keysyms that cause those events to occur.

.. note::

    Many players have learned the default set of Ren'Py keybindings, and
    expect them to be the same from game to game.

In Ren'Py keysyms are strings representing mouse buttons, joystick buttons,
or keyboard keys.

Mouse buttons use keysyms of the form 'mouseup_#' or 'mousedown_#',
where # is a button number. Ren'Py assumes a five button mouse,
where buttons 1, 2, and 3 are the left, middle, and right buttons, while
buttons 4 and 5 are generated by scrolling the wheel up and down.
For example, "mousedown_1" is generally a press of the left mouse button,
"mouseup_1" is a release of that button, and "mousedown_4" is a turn of the
scroll wheel to the top.

There are two kinds of keyboard keysyms. The first is a string containing a
character that is generated when a key is pressed. This is useful for
binding alphabetic keys and numbers. Examples of these keysyms include "a", "A", and "7".

Keyboard keysyms can also be the symbolic name for the key. This can be any of
the K\_ constants taken from pygame.constants. This type of keysym looks like
"K\_BACKSPACE", "K\_RETURN", and "K\_TAB"; a full list of this kind of keysyms may
be found `here <http://www.pygame.org/docs/ref/key.html>`_.

Keyboard keysyms may be preceded by the following prefixes, separated by
underscores:

alt
    Matches if the Alt key is pressed. Keysyms without this prefix match
    when the Alt key is not pressed.
meta
    Matches if the meta, Command, or Windows key is pressed. Keysyms without
    this prefix match when the meta key is not pressed.
ctrl
    Matches if the Ctrl key is pressed. Keysyms without this prefix match
    when the Ctrl key is not pressed. (Ctrl is not very useful, as it
    usually triggers skipping.)
shift
    Matches when the Shift key is pressed.
noshift
    Matches when the Shift key is not pressed.
repeat
    Matches when the key is a repeat due to the key being held down. Keysyms
    without this prefix do not match repeats.
keydown
    Matches when the key is being pressed down (the default).
keyup
    Matches when the key is being released.

For example, the keysym "shift_alt_K_F5" will match the F5 key being pressed
while Shift and Alt are held down.


To change a binding, update the appropriate list in :var:`config.keymap`. The
following adds the 't' key to the list of keys that dismiss a say
statement, and removes the space key from that list. ::

    init:
        $ config.keymap['dismiss'].append('t')
        $ config.keymap['dismiss'].remove('K_SPACE')

The default keymap is contained inside renpy/common/00keymap.rpy, and
as of version 6.99 is as follows::

    config.keymap = dict(

        # Bindings present almost everywhere, unless explicitly
        # disabled.
        rollback = [ 'K_PAGEUP', 'repeat_K_PAGEUP', 'K_AC_BACK', 'mousedown_4' ],
        screenshot = [ 's' ],
        toggle_afm = [ ],
        toggle_fullscreen = [ 'f', 'alt_K_RETURN', 'alt_K_KP_ENTER', 'K_F11' ],
        game_menu = [ 'K_ESCAPE', 'K_MENU', 'mouseup_3' ],
        hide_windows = [ 'mouseup_2', 'h' ],
        launch_editor = [ 'E' ],
        dump_styles = [ ],
        reload_game = [ 'R' ],
        inspector = [ 'I' ],
        full_inspector = [ 'alt_I' ],
        developer = [ 'D' ],
        quit = [ ],
        iconify = [ ],
        help = [ 'K_F1', 'meta_shift_/' ],
        choose_renderer = [ 'G' ],
        progress_screen = [ 'alt_shift_K_p', 'meta_shift_K_p', 'K_F2' ],

        # Accessibility.
        self_voicing = [ 'v', 'V' ],
        clipboard_voicing = [ 'C' ],
        debug_voicing = [ 'alt_V', 'meta_V' ],

        # Say.
        rollforward = [ 'mousedown_5', 'K_PAGEDOWN', 'repeat_K_PAGEDOWN' ],
        dismiss = [ 'mouseup_1', 'K_RETURN', 'K_SPACE', 'K_KP_ENTER', 'K_SELECT' ],
        dismiss_unfocused = [ ],

        # Pause.
        dismiss_hard_pause = [ ],

        # Focus.
        focus_left = [ 'K_LEFT', 'repeat_K_LEFT' ],
        focus_right = [ 'K_RIGHT', 'repeat_K_RIGHT' ],
        focus_up = [ 'K_UP', 'repeat_K_UP' ],
        focus_down = [ 'K_DOWN', 'repeat_K_DOWN' ],

        # Button.
        button_ignore = [ 'mousedown_1' ],
        button_select = [ 'mouseup_1', 'K_RETURN', 'K_KP_ENTER', 'K_SELECT' ],
        button_alternate = [ 'mouseup_3' ],
        button_alternate_ignore = [ 'mousedown_3' ],

        # Input.
        input_backspace = [ 'K_BACKSPACE', 'repeat_K_BACKSPACE' ],
        input_enter = [ 'K_RETURN', 'K_KP_ENTER' ],
        input_left = [ 'K_LEFT', 'repeat_K_LEFT' ],
        input_right = [ 'K_RIGHT', 'repeat_K_RIGHT' ],
        input_up = [ 'K_UP', 'repeat_K_UP' ],
        input_down = [ 'K_DOWN', 'repeat_K_DOWN' ],
        input_delete = [ 'K_DELETE', 'repeat_K_DELETE' ],
        input_home = [ 'K_HOME' ],
        input_end = [ 'K_END' ],
        input_copy = [ 'ctrl_K_INSERT', 'ctrl_K_c' ],
        input_paste = [ 'shift_K_INSERT', 'ctrl_K_v' ],

        # Viewport.
        viewport_leftarrow = [ 'K_LEFT', 'repeat_K_LEFT' ],
        viewport_rightarrow = [ 'K_RIGHT', 'repeat_K_RIGHT' ],
        viewport_uparrow = [ 'K_UP', 'repeat_K_UP' ],
        viewport_downarrow = [ 'K_DOWN', 'repeat_K_DOWN' ],
        viewport_wheelup = [ 'mousedown_4' ],
        viewport_wheeldown = [ 'mousedown_5' ],
        viewport_drag_start = [ 'mousedown_1' ],
        viewport_drag_end = [ 'mouseup_1' ],

        # These keys control skipping.
        skip = [ 'K_LCTRL', 'K_RCTRL' ],
        stop_skipping = [ ],
        toggle_skip = [ 'K_TAB' ],
        fast_skip = [ '>' ],

        # Bar.
        bar_activate = [ 'mousedown_1', 'K_RETURN', 'K_KP_ENTER', 'K_SELECT' ],
        bar_deactivate = [ 'mouseup_1', 'K_RETURN', 'K_KP_ENTER', 'K_SELECT' ],
        bar_left = [ 'K_LEFT', 'repeat_K_LEFT' ],
        bar_right = [ 'K_RIGHT', 'repeat_K_RIGHT' ],
        bar_up = [ 'K_UP', 'repeat_K_UP' ],
        bar_down = [ 'K_DOWN', 'repeat_K_DOWN' ],

        # Delete a save.
        save_delete = [ 'K_DELETE' ],

        # Draggable.
        drag_activate = [ 'mousedown_1' ],
        drag_deactivate = [ 'mouseup_1' ],

        # Debug console.
        console = [ 'shift_O' ],
        console_older = [ 'K_UP', 'repeat_K_UP' ],
        console_newer = [ 'K_DOWN', 'repeat_K_DOWN'],

        # Ignored (kept for backwards compatibility).
        toggle_music = [ 'm' ],
        viewport_up = [ 'mousedown_4' ],
        viewport_down = [ 'mousedown_5' ],

        # Profile commands.
        profile_once = [ 'K_F8' ],
        memory_profile = [ 'K_F7' ],

        )

Gamepad bindings work a little differently. Gamepad bindings work by mapping
a gamepad event to one or more Ren'Py event names. The default set of
gamepad bindings is given below::

    config.pad_bindings = {
        "pad_leftshoulder_press" : [ "rollback", ],
        "pad_lefttrigger_pos" : [ "rollback", ],
        "pad_back_press" : [ "rollback", ],

        "pad_guide_press" : [ "game_menu", ],
        "pad_start_press" : [ "game_menu", ],

        "pad_y_press" : [ "hide_windows", ],

        "pad_rightshoulder_press" : [ "rollforward", ],

        "pad_righttrigger_pos" : [ "dismiss", "button_select", "bar_activate", "bar_deactivate" ],
        "pad_a_press" : [ "dismiss", "button_select", "bar_activate", "bar_deactivate"],
        "pad_b_press" : [ "button_alternate" ],

        "pad_dpleft_press" : [ "focus_left", "bar_left", "viewport_leftarrow" ],
        "pad_leftx_neg" : [ "focus_left", "bar_left", "viewport_leftarrow" ],
        "pad_rightx_neg" : [ "focus_left", "bar_left", "viewport_leftarrow" ],

        "pad_dpright_press" : [ "focus_right", "bar_right", "viewport_rightarrow" ],
        "pad_leftx_pos" : [ "focus_right", "bar_right", "viewport_rightarrow" ],
        "pad_rightx_pos" : [ "focus_right", "bar_right", "viewport_rightarrow" ],

        "pad_dpup_press" : [ "focus_up", "bar_up", "viewport_uparrow" ],
        "pad_lefty_neg" :  [ "focus_up", "bar_up", "viewport_uparrow" ],
        "pad_righty_neg" : [ "focus_up", "bar_up", "viewport_uparrow" ],

        "pad_dpdown_press" : [ "focus_down", "bar_down", "viewport_downarrow" ],
        "pad_lefty_pos" : [ "focus_down", "bar_down", "viewport_downarrow" ],
        "pad_righty_pos" : [ "focus_down", "bar_down", "viewport_downarrow" ],
    }

Gamepad buttons have an event name of the form "pad_*button*_press" or
"pad_*button*_release". Analog axis events have the form "pad_*axis*_pos",
"pad_*axis*_neg", or "pad_*axis*_zero".
