.. Automatically generated file - do not modify.

.. function:: AnimatedValue(value=0.0, range=1.0, delay=1.0, old_value=None)
    
    This animates a value, taking `delay` seconds to vary the value from
    `old_value` to `value`.
    
    `value`
        The value itself, a number.
    
    `range`
        The range of the value, a number.
    
    `delay`
        The time it takes to animate the value, in seconds. Defaults
        to 1.0.
    
    `old_value`
        The old value. If this is None, then the value is taken from the
        AnimatedValue we replaced, if any. Otherwise, it is initialized
        to `value`.

.. function:: AudioPositionValue(channel=u'music', update_interval=0.1)
    
    A value that shows the playback position of the audio file playing
    in `channel`.
    
    `update_interval`
        How often the value updates, in seconds.

.. function:: DictValue(dict, key, range, max_is_zero=False, style=u'bar', offset=0, step=None)
    
    A value that allows the user to adjust the value of a key
    in a dict.
    
    `dict`
        The dict.
    `key`
        The key.
    `range`
        The range to adjust over.
    `max_is_zero`
        If True, then when the value of a key is zero, the value of the
        bar will be range, and all other values will be shifted down by 1.
        This works both ways - when the bar is set to the maximum, the
        value of a key is set to 0.
    
    `style`
        The styles of the bar created.
    `offset`
        An offset to add to the value.
    `step`
        The amount to change the bar by. If None, defaults to 1/10th of
        the bar.

.. function:: FieldValue(object, field, range, max_is_zero=False, style=u'bar', offset=0, step=None)
    
    A bar value that allows the user to adjust the value of a field
    on an object.
    
    `object`
        The object.
    `field`
        The field, a string.
    `range`
        The range to adjust over.
    `max_is_zero`
        If True, then when the field is zero, the value of the
        bar will be range, and all other values will be shifted
        down by 1. This works both ways - when the bar is set to
        the maximum, the field is set to 0.
    
        This is used internally, for some preferences.
    `style`
        The styles of the bar created.
    `offset`
        An offset to add to the value.
    `step`
        The amount to change the bar by. If None, defaults to 1/10th of
        the bar.

.. function:: MixerValue(mixer)
    
    The value of an audio mixer.
    
    `mixer`
        The name of the mixer to adjust. This is usually one of
        "music", "sfx", or "voice", but user code can create new
        mixers.

.. function:: ScreenVariableValue(variable, range, max_is_zero=False, style=u'bar', offset=0, step=None)
    
    A bar value that adjusts the value of a variable in a screen.
    
    `object`
        The object.
    `field`
        The field, a string.
    `range`
        The range to adjust over.
    `max_is_zero`
        If True, then when the field is zero, the value of the
        bar will be range, and all other values will be shifted
        down by 1. This works both ways - when the bar is set to
        the maximum, the field is set to 0.
    
        This is used internally, for some preferences.
    `style`
        The styles of the bar created.
    `offset`
        An offset to add to the value.
    `step`
        The amount to change the bar by. If None, defaults to 1/10th of
        the bar.
     

.. function:: StaticValue(value=0.0, range=1.0)
    
    This allows a value to be specified statically.
    
    `value`
         The value itself, a number.
    
    `range`
         The range of the value.

.. function:: VariableValue(variable, range, max_is_zero=False, style=u'bar', offset=0, step=None)
    
    A bar value that allows the user to adjust the value of a variable
    in the default store.
    
    `variable`
        A string giving the name of the variable to adjust.
    `range`
        The range to adjust over.
    `max_is_zero`
        If True, then when the field is zero, the value of the
        bar will be range, and all other values will be shifted
        down by 1. This works both ways - when the bar is set to
        the maximum, the field is set to 0.
    
        This is used internally, for some preferences.
    `style`
        The styles of the bar created.
    `offset`
        An offset to add to the value.
    `step`
        The amount to change the bar by. If None, defaults to 1/10th of
        the bar.

.. function:: XScrollValue(viewport)
    
    The value of an adjustment that horizontally scrolls the viewport with the
    given id, on the current screen. The viewport must be defined before a bar
    with this value is.

.. function:: YScrollValue(viewport)
    
    The value of an adjustment that vertically scrolls the viewport with the
    given id, on the current screen. The viewport must be defined before a bar
    with this value is.

