.. Automatically generated file - do not modify.

.. function:: renpy.displayable(d, scope=None)
    
    This takes `d`, which may be a displayable object or a string. If it's
    a string, it converts that string into a displayable using the usual
    rules.

.. function:: renpy.end_interaction(value)
    
    If `value` is not None, immediately ends the current interaction, causing
    the interaction to return `value`. If `value` is None, does nothing.
    
    This can be called from inside the render and event methods of a
    creator-defined displayable.

.. function:: renpy.load_image(im)
    
    Loads the image manipulator `im` using the image cache, and returns a texture.

.. function:: renpy.load_surface(im)
    
    Loads the image manipulator `im` using the image cache, and returns a pygame Surface.

.. function:: renpy.map_event(ev, keysym)
    
    Returns true if the pygame event `ev` matches `keysym`
    
    `keysym`
        One of:
    
        * The name of a keybinding in :var:`config.keymap`.
        * A keysym, as documented in the :ref:`keymap` section.
        * A list containing one or more keysyms.

.. function:: renpy.render(d, width, height, st, at)
    
    Causes a displayable to be rendered, and a renpy.Render object to
    be returned.
    
    `d`
        The displayable to render.
    
    `width`, `height`
        The width and height available for the displayable to render into.
    
    `st`, `at`
        The shown and animation timebases.
    
    Renders returned by this object may be cached, and should not be modified
    once they have been retrieved.

.. function:: renpy.timeout(seconds)
    
    Causes an event to be generated before `seconds` seconds have elapsed.
    This ensures that the event method of a user-defined displayable will be
    called.

.. function:: im.load_image(im)
    
    Loads the image manipulator `im` using the image cache, and returns a texture.

.. function:: im.load_surface(im)
    
    Loads the image manipulator `im` using the image cache, and returns a pygame Surface.

