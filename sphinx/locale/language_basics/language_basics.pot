# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012, Tom Rothamel
# This file is distributed under the same license as the Ren'Py Visual Novel Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Ren'Py Visual Novel Engine 6.15.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-08-27 22:25\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/language_basics.rst:6
# df138d32cda645eb9e6158c735df58a6
msgid "Language Basics"
msgstr ""

#: ../../source/language_basics.rst:8
# e18b841ad9b8455286283b2c51ac694a
msgid "Before we can describe the Ren'Py language, we must first describe the structure of a Ren'Py script. This includes how a files are broken into blocks made up of lines, and how those lines are broken into the elements that make up statements."
msgstr ""

#: ../../source/language_basics.rst:14
# a38f3d9f8fbe410dbcfe56bc410342a0
msgid "Files"
msgstr ""

#: ../../source/language_basics.rst:16
# 548b1b3c15ec4ef8afda256b8c1f3235
msgid "The script of a Ren'Py game is made up of all the files found under the game directory ending with the .rpy extension. Ren'Py will consider each of these files (in unicode order), and will use the contents of the files as the script."
msgstr ""

#: ../../source/language_basics.rst:21
# f8fbe886e5f1497aa1c7a1052ad17bc1
msgid "Generally, there's no difference between a script broken into multiple files, and a script that consists of one big file. Control can be transferred between files by jumping to or calling a label in another file.  This makes the division of a script up into files a matter of personal style - some game-makers prefer to have small files (like one per event, or one per day), while others prefer to have one big script."
msgstr ""

#: ../../source/language_basics.rst:29
# 5b30375a85614e699de57861125369c2
msgid "To speed up loading time, Ren'Py will compile the ``.rpy`` files into .rpyc files when it starts up. When a ``.rpy`` file is changed, the ``.rpyc`` file will be updated when Ren'Py starts up. However, if a .rpyc file exists without a corresponding ``.rpy`` file, the ``.rpyc`` file will be used. This can lead to problems if a ``.rpy`` file is deleted without deleting the .rpyc file."
msgstr ""

#: ../../source/language_basics.rst:38
# d5dbd5a910614118a8fda8e756553fb6
msgid "Comments"
msgstr ""

#: ../../source/language_basics.rst:40
# 19faab49fc4449ee91c0337aec141399
msgid "A Ren'Py script file may contain comments. A comment begins with a hash mark ('#'), and ends at the end of the line containing the comment. As an exception, a comment may not be part of a string."
msgstr ""

#: ../../source/language_basics.rst:51
# 84191e7e2a134f48b2823d0e4827c95a
msgid "Ren'Py ignores comments, so the script is treated like the comment wasn't there."
msgstr ""

#: ../../source/language_basics.rst:56
# 8c146ee4955a4da6917062d3bc7f28db
msgid "Logical Lines"
msgstr ""

#: ../../source/language_basics.rst:58
# 725b4b2807fd477d9d0fb35b665b8969
msgid "A script file is broken up into :dfn:`logical lines`. A logical line always begins at the start of a line in the file. A logical line ends at the end of a line, unless:"
msgstr ""

#: ../../source/language_basics.rst:62
# 99f9407e8e7e42d3b77a3a67c968603c
msgid "The last character on the line is a backslash ('\\\\')."
msgstr ""

#: ../../source/language_basics.rst:64
# dbed1125ac9c4d05a0f2f059142e82da
msgid "The line contains an open parenthesis character ('(', '{', or '['), that hasn't been matched by the cooresponding close parenthesis character (')', '}', or ']', respectively)."
msgstr ""

#: ../../source/language_basics.rst:68
# bfbb0cae776c4f7b9d83ea7b42ea9c83
msgid "The end of the line occurs during a string."
msgstr ""

#: ../../source/language_basics.rst:70
# bb7d602af5f4402c845cbd61387d4005
msgid "Once a logical line ends, the next logical line begins at the start of the next line."
msgstr ""

#: ../../source/language_basics.rst:73
# 040f0e71053544f88cd71226a6647bbe
msgid "Most statements in the Ren'Py language consist of a single logical line, while some statements consist of multiple lines."
msgstr ""

#: ../../source/language_basics.rst:86
# 77f7564bd870498cae3decee98ea8661
msgid "Empty logical lines are ignored."
msgstr ""

#: ../../source/language_basics.rst:90
# 26b31158a25d4b0aa1212927a5d027bd
msgid "Indentation and Blocks"
msgstr ""

#: ../../source/language_basics.rst:92
# 036ab981be50468dba78ef6ace12c152
msgid ":dfn:`Indentation` is the name we give to the space at the start of each logical line that's used to line up Ren'Py statements. In Ren'Py, indentation must consist only of spaces."
msgstr ""

#: ../../source/language_basics.rst:96
# 8d3f3783ac3842f49d0285ec7c87affb
msgid "Indentation is used to group statements into :dfn:`blocks`. A block is a group of lines, and often a group of statements. The rules for dividing a file into blocks are:"
msgstr ""

#: ../../source/language_basics.rst:100
# 2668b1b2371f43049970e435c04d3cb2
msgid "A block is open at the start of a file."
msgstr ""

#: ../../source/language_basics.rst:102
# 0bbb03beecf7403ba9dae212ce964a7c
msgid "A new block is started whenever a logical line is indented past the previous logical line."
msgstr ""

#: ../../source/language_basics.rst:105
# 522cfbcec06b491484ddd1d948796e0f
msgid "All logical lines inside a block must have the same indentation."
msgstr ""

#: ../../source/language_basics.rst:107
# 556d58d78ad24dba88e9bef647c2c598
msgid "A block ends when a logical line is encountered with less indentation than the lines in the block."
msgstr ""

#: ../../source/language_basics.rst:110
# eefc6b1dbb30490095156be8ae5a963c
msgid "Indentation is very important to Ren'Py, and cause syntax or logical errors when it's incorrect. At the same time, the use of indentation to convey block structure provides us a way of indicating that structure without overwhelming the script text."
msgstr ""

#: ../../source/language_basics.rst:129
# b95f8222010e453e952caea3782d0ffd
msgid "Elements of Statements"
msgstr ""

#: ../../source/language_basics.rst:131
# 148164c7928b4adba0b5e9d8c4dfc343
msgid "Ren'Py statements are made of a few basic parts."
msgstr ""

#: ../../source/language_basics.rst:140
# 4a61cd6bb4ee48d480909df7d468c272
msgid ":dfn:`Keyword`"
msgstr ""

#: ../../source/language_basics.rst:134
# 87d0aa0f5b6044758cc665ea9e1550d8
msgid "A keyword is a word that must literally appear in the source code. They're used to introduce statements and properties."
msgstr ""

#: ../../source/language_basics.rst:137
# d48394da7997427fbfa87750ae989d8b
msgid "Names begining with a single underscore (_) are reserved for Ren'Py internal use, unless otherwise documented. When a name begins with __ but doesn't end with __, it is changed to a file-specfic version of that name."
msgstr ""

#: ../../source/language_basics.rst:146
# 3a007736b1cb441f85c1d2fbd939a3f2
msgid ":dfn:`Name`"
msgstr ""

#: ../../source/language_basics.rst:143
# db2cc6201b1b4fa49f5fe797436ce1f7
msgid "A name begins with a letter or underscore, which is followed by zero or more letters, numbers, and underscores. For our purpose, unicode characters between U+00a0 and U+fffd are considered to be letters."
msgstr ""

#: ../../source/language_basics.rst:148
# 8132450c6f6247ed8b7497f3b4452835
msgid ":dfn:`Image Name`"
msgstr ""

#: ../../source/language_basics.rst:150
# f29f7a1463f64796ab94a2015afda233
msgid "An :dfn:`image name` consists of one or more names, separated by spaces. The first component of the image name is called the :dfn:`image tag`. The second and later components of the name are the :dfn:`image attributes`."
msgstr ""

#: ../../source/language_basics.rst:155
# d094d4664f2f4b068b41b21e9661f0b1
msgid "For example, take the image name ``mary beach night happy``. The image tag is ``mary``, while the image attributes are ``mary``, ``beach``, and ``night``."
msgstr ""

#: ../../source/language_basics.rst:172
#: ../../source/language_basics.rst:251
# ad409fd3d6d74e468a1d1dbec1da9c27
# 4704842c36a74f56a6220bdecae410d4
msgid ":dfn:`String`"
msgstr ""

#: ../../source/language_basics.rst:160
# ec046e0f300b46e3989ef06ee8416d06
msgid "A string begins with a quote character (one of \", ', or \\`), contains some sequence of characters, and ends with the same quote character."
msgstr ""

#: ../../source/language_basics.rst:164
# ff412e47ac8b463a899924cb1615c5fe
msgid "The backslash character (\\) is used to escape quotes, special characters such as % (written as \\%) and { (written as \\{). It's also used to include newlines, using the \\n sequence."
msgstr ""

#: ../../source/language_basics.rst:168
# 9cc24f2ace7c4247bb199c52d75288ab
msgid "Inside a Ren'Py string, consecutive whitespace is compressed into a single whitespace character, unless a space is preceded by a backslash. ::"
msgstr ""

#: ../../source/language_basics.rst:191
# 3a2bfa7692da4eb18122b8a902e3b84f
msgid ":dfn:`Simple Expression`"
msgstr ""

#: ../../source/language_basics.rst:175
# bbc99908aed441f685c600a64ddd9be1
msgid "A simple expression is a Python expression, used to include Python in some parts of the Ren'Py script. A simple expression begins with:"
msgstr ""

#: ../../source/language_basics.rst:179
# d1ba86d663e44b30a8177b4204ced5c6
msgid "A name."
msgstr ""

#: ../../source/language_basics.rst:180
# 2b50bdf0c07748c08ac772794ed0ff90
msgid "A string."
msgstr ""

#: ../../source/language_basics.rst:181
# f9723b48f98643c794664bb91caf28e1
msgid "A number."
msgstr ""

#: ../../source/language_basics.rst:182
# cb3b53bc3f4740dcb106cf9a77bdccc8
msgid "Any python expression, in parenthesis."
msgstr ""

#: ../../source/language_basics.rst:184
# 00b4d152d8ba49c786ea4e573a477fc3
msgid "This can be followed by any number of:"
msgstr ""

#: ../../source/language_basics.rst:186
# b084268f12d14b079f27be8ab3b9d6e9
msgid "A dot followed by a name."
msgstr ""

#: ../../source/language_basics.rst:187
# 81bcba3772724aceae51d48da795df9b
msgid "A parenthesised python expression."
msgstr ""

#: ../../source/language_basics.rst:189
# ba54c8766bea460aa5f8df822ccedae2
msgid "As an example, ``3``, ``(3 + 4)``, ``foo.bar``, and ``foo(42)`` are all simple expressions. But ``3 + 4`` is not, as the expression ends at the end of a string."
msgstr ""

#: ../../source/language_basics.rst:194
# 140089ac1e1c4e4586707f5f57d6fb95
msgid ":dfn:`At List`"
msgstr ""

#: ../../source/language_basics.rst:194
# b60614b22a444e0a96614e12756374df
msgid "An at list is a list of simple expressions, separated by commas."
msgstr ""

#: ../../source/language_basics.rst:200
# 5872602e7a5e46dcac0cc8e1966ee633
msgid ":dfn:`Python Expression`"
msgstr ""

#: ../../source/language_basics.rst:197
# e677453dea074cdabb667890433a216a
msgid "A python expression is an arbitrary python expression, that may not include a colon. These are used to express the conditions in the if and while statements."
msgstr ""

#: ../../source/language_basics.rst:203
# 8379e108dd5c40a2b24aa146ff072655
msgid "Common Statement Syntax"
msgstr ""

#: ../../source/language_basics.rst:205
# 16e6c019f2694814bdf26a879763b6e2
msgid "Most Ren'Py statements share a common syntax. With the exception of the say statement, they begin with a keyword that introduces the statement. This keyword is followed by a parameter, if the statement takes one."
msgstr ""

#: ../../source/language_basics.rst:210
# 51004c19fec84f2aac883894257d6dd5
msgid "The parameter is then followed by one or more properties. Properties may be supplied in any order, provided each property is only supplied once. A property starts off with a keyword. For most properties, the property name is followed by one of the syntax elements given above."
msgstr ""

#: ../../source/language_basics.rst:215
# 4cf5aea09c424c0585e973a06b0b7b69
msgid "If the statement takes a block, the line ends with a colon (:). Otherwise, the line just ends."
msgstr ""

#: ../../source/language_basics.rst:222
# 4825d8985f4a4dec91cdfd694598b6e9
msgid "Python Expression Syntax"
msgstr ""

#: ../../source/language_basics.rst:226
# 1df3be218c0745f984f7cbe8df088f19
msgid "It may not be necessary to read this section thoroughly right now. Instead, skip ahead, and if you find yourself unable to figure out an example, or want to figure out how things actually work, you can go back and review this."
msgstr ""

#: ../../source/language_basics.rst:232
# 30b6b146efd941618748e7d61da3d4f8
msgid "Many portions of Ren'Py take python expressions. For example, defining a new Character involves a call to the Character function. While Python expressions are very powerful, only a fraction of that power is necessary to write a basic Ren'Py game."
msgstr ""

#: ../../source/language_basics.rst:237
# 64d183787b0d4837b01cca50f96a4a8b
msgid "Here's a synopsis of python expressions."
msgstr ""

#: ../../source/language_basics.rst:241
# 334c25bb957e4bf79fe6f8857ac9fad5
msgid ":dfn:`Integer`"
msgstr ""

#: ../../source/language_basics.rst:240
# 35b88dae925542ba8fa8cd440d7e839a
msgid "An integer is a number without a decimal point. ``3`` and ``42`` are integers."
msgstr ""

#: ../../source/language_basics.rst:245
# 18d00276450842a9b190965fdfb948b3
msgid ":dfn:`Float`"
msgstr ""

#: ../../source/language_basics.rst:244
# a8a59ab6b56b4c0ca8c96d78f64d8801
msgid "A float (short for floating-point number) is a number with a decimal point. ``.5``, ``7.``, and ``9.0`` are all floats."
msgstr ""

#: ../../source/language_basics.rst:248
# ecde628790024b98939d3971ab9e820e
msgid "Python strings begin with \" or ', and end with the same character. \\\\ is used to escape the end character, and to introduce special characters like newlines (\\\\n). Unlike Ren'Py strings, python strings can't span lines."
msgstr ""

#: ../../source/language_basics.rst:256
# ed780568ed1e45e0be6b8fc86acc6045
msgid ":dfn:`True, False, None`"
msgstr ""

#: ../../source/language_basics.rst:254
# 3e4424b5609146ea8b208655af300875
msgid "There are three special values. ``True`` is a true value, ``False`` is a false value. ``None`` represents the absence of a value. For example,"
msgstr ""

#: ../../source/language_basics.rst:272
# e86b6984fd9a47c8af7b368f1f8f8947
msgid ":dfn:`Tuple`"
msgstr ""

#: ../../source/language_basics.rst:259
# 1fe8f47635e7428281d742995eeb34bf
msgid "Tuples are used to represent containers where the number of items is important. For example, one might use a 2-tuple (also called a pair) to represent width and height, or a 4-tuple (x, y, width, height) to represent a rectangle."
msgstr ""

#: ../../source/language_basics.rst:264
# 2005182d92854579b479a47eb1a3a32b
msgid "Tuples begin with a left-parenthesis ``(``, consist of zero or more comma-separated python expressions, and end with a right-parenthesis ``)``. As a special case, the one-item tuple must have a parenthesis following the item. For example::"
msgstr ""

#: ../../source/language_basics.rst:282
# 316d535de14c4132a4ca58fc7d5d0e8a
msgid ":dfn:`List`"
msgstr ""

#: ../../source/language_basics.rst:275
# 74d82c7219054c8eafe30c22de16fec8
msgid "Lists are used to represent containers where the number of items may vary. A list begins with a ``[``, contains a comma-separated list of expressions, and ends with ``]``. For example::"
msgstr ""

#: ../../source/language_basics.rst:295
# 3256aff65ad2489c8c454e00188aca8e
msgid ":dfn:`Variable`"
msgstr ""

#: ../../source/language_basics.rst:285
# 89184edacab541d2a4a5efc6923ded29
msgid "Python expressions can use variables, that store values defined using the define statement or python statements. A variable begins with a letter or underscore, and then has zero or more letters, numbers, or underscores. For example::"
msgstr ""

#: ../../source/language_basics.rst:294
# 9d02cab6259b45ae824d35d03f63611a
msgid "Variables beginning with _ are reserved for Ren'Py's use, and shouldn't be used by user code."
msgstr ""

#: ../../source/language_basics.rst:305
# 76927452f95547c8852da4b5c912bc85
msgid ":dfn:`Field Access`"
msgstr ""

#: ../../source/language_basics.rst:298
# de70a53383ea4bb888833bcf52574b92
msgid "Python modules and objects have fields, which can be accessed with by following an expression (usually a variable) with a dot and the field name. For example::"
msgstr ""

#: ../../source/language_basics.rst:304
# d1f40758a7414220b01e31d1b4bb3092
msgid "Consists of a variable (config) followed by a field access (screen_width)."
msgstr ""

#: ../../source/language_basics.rst:324
# a8b4c378981b4b1481e416b1605a7d8e
msgid ":dfn:`Call`"
msgstr ""

#: ../../source/language_basics.rst:308
# 03a6d7ad0e534dfa9cd746a58e7b91da
msgid "Python expressions can call a function which returns a value. They begin with an expression (usually a variable), followed by a left-parenthesis, a comma-separated list of arguments, and a right-parenthesis. The argument list begins with the position arguments, which are python expressions. These are followed by keyword arguments, which consist of the argument name, and equals sign, and an expression. In the example example::"
msgstr ""

#: ../../source/language_basics.rst:318
# 194934086cd240e68d25d48319f4c2d8
msgid "we call the Character function. It's given one positional argument, the string \"Eileen\". It's given two keyword argument: ``type`` with the value of the ``adv`` variable, and ``color`` with a string value of \"#0f0\"."
msgstr ""

#: ../../source/language_basics.rst:323
# 314b8d3087804744b722d7af2a68ff7b
msgid "Constructors are a type of function which returns a new object, and are called the same way."
msgstr ""

#: ../../source/language_basics.rst:326
# 1b361cba4b4345bc95b59f36b16c33d6
msgid "When reading this documentation, you might see a function signature like:"
msgstr ""

#: ../../source/language_basics.rst:331
# d811a49015144f908f7852342a4dfa99
msgid "A sample function that doesn't actually exist in Ren'Py, but is used only in documentation."
msgstr ""

#: ../../source/language_basics.rst:334
# ddb69f0409f64dc18d0510883fd80d3b
msgid "This function:"
msgstr ""

#: ../../source/language_basics.rst:336
# ef4413c8a9034ce590c34d4ad58006d9
msgid "Has the name \"Sample\""
msgstr ""

#: ../../source/language_basics.rst:337
# 19a90a27db9645299ce699d61b124175
msgid "Has two positional parameters, a name and a delay. In a real function, the types of these parameters would be made clear from the documentation."
msgstr ""

#: ../../source/language_basics.rst:340
# e17b634f33c249b4b4f756dd7394a31a
msgid "Has one keyword argument, position, which has a default value of (0, 0)."
msgstr ""

#: ../../source/language_basics.rst:343
# 67ee692d345545d3a36b8e4ad1f5300e
msgid "Since the functions ends with \\*\\*properties, it means that it can take :ref:`style properties <style-properties>` as additional keyword arguments. Other special entries are \\*args, which means that it takes an arbitrary number of postional parameters, and \\*\\*kwargs, which means that the keyword arguments are described in the documentation."
msgstr ""

#: ../../source/language_basics.rst:349
# 438544f7d15b4f7399e1c6513980c1a8
msgid "Python is a lot more powerful than we have space for in this manual. To learn Python in more detail, we recommend starting with the Python tutorial, which is available from `python.org <http://docs.python.org/release/2.7/tutorial/index.html>`_. While we don't think a deep knowledge of Python is necessary to work with Ren'Py, the basics of python statements and expressions is often helpful."
msgstr ""

