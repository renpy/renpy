#!/usr/bin/env python3

import pathlib
import collections
import re

ROOT = pathlib.Path(__file__).parent.parent
HEADER = "# Generated by scripts/relative_imports.py, do not edit below this line."

def find_modules():
    """
    Finds the names of all modules.
    """

    modules = [ ]

    # .py modules.
    for i in ROOT.glob("renpy/**/*.py"):
        i = i.relative_to(ROOT)
        mod = str(i.with_suffix("")).replace("/", ".")
        if mod.endswith(".__init__"):
            mod = mod[:-9]

        modules.append(mod)

    # Generated modules.
    for i in (ROOT / "module" / "gen3").glob("*.c"):
        mod = str(i.stem)

        modules.append(mod)

    modules.sort()

    package_modules = collections.defaultdict(list)

    for mod in modules:
        package, _, module = mod.rpartition(".")

        if not package.startswith("renpy"):
            continue

        package_modules[package].append(module)

    return package_modules

def generate(package, modules):

    if package == "renpy.common":
        return

    print(package)

    fn = package.replace(".", "/") + "/__init__.py"
    p = ROOT / fn

    text = p.read_text()

    text = text.split("\n")
    new_text = [ ]

    for i in text:
        if i == HEADER:
            break

        new_text.append(i)

    text = "\n".join(new_text)

    text = text.rstrip("\n")
    text = text + "\n\n\n"

    text += HEADER + "\n"
    text += "if 1 == 0:\n"

    for mod in modules:
        text += f"    from . import {mod}\n"

    p.write_text(text)

def main():
    package_modules = find_modules()
    for package, modules in package_modules.items():
        generate(package, modules)


if __name__ == "__main__":
    main()
